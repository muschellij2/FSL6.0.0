#!/usr/bin/env fslpython
#   Copyright (C) 2016 University of Oxford 
#   Part of FSL - FMRIB's Software Library
#   http://www.fmrib.ox.ac.uk/fsl
#   fsl@fmrib.ox.ac.uk
#   
#   Developed at FMRIB (Oxford Centre for Functional Magnetic Resonance
#   Imaging of the Brain), Department of Clinical Neurology, Oxford
#   University, Oxford, UK
#   
#   
#   LICENCE
#   
#   FMRIB Software Library, Release 5.0 (c) 2012, The University of
#   Oxford (the "Software")
#   
#   The Software remains the property of the University of Oxford ("the
#   University").
#   
#   The Software is distributed "AS IS" under this Licence solely for
#   non-commercial use in the hope that it will be useful, but in order
#   that the University as a charitable foundation protects its assets for
#   the benefit of its educational and research purposes, the University
#   makes clear that no condition is made or to be implied, nor is any
#   warranty given or to be implied, as to the accuracy of the Software,
#   or that it will be suitable for any particular purpose or for use
#   under any specific conditions. Furthermore, the University disclaims
#   all responsibility for the use which is made of the Software. It
#   further disclaims any liability for the outcomes arising from using
#   the Software.
#   
#   The Licensee agrees to indemnify the University and hold the
#   University harmless from and against any and all claims, damages and
#   liabilities asserted by third parties (including claims for
#   negligence) which arise directly or indirectly from the use of the
#   Software or the sale of any products based on the Software.
#   
#   No part of the Software may be reproduced, modified, transmitted or
#   transferred in any form or by any means, electronic or mechanical,
#   without the express permission of the University. The permission of
#   the University is not required if the said reproduction, modification,
#   transmission or transference is done without financial return, the
#   conditions of this Licence are imposed upon the receiver of the
#   product, and all original and amended source code is included in any
#   transmitted product. You may be held legally responsible for any
#   copyright infringement that is caused or encouraged by your failure to
#   abide by these terms and conditions.
#   
#   You are not permitted under this Licence to use this Software
#   commercially. Use for which any financial return is received shall be
#   defined as commercial use, and includes (1) integration of all or part
#   of the source code or the Software into a product for sale or license
#   by or on behalf of Licensee to third parties or (2) use of the
#   Software or any derivative of it for research with the final aim of
#   developing software products for sale or license to a third party or
#   (3) use of the Software or any derivative of it for research with the
#   final aim of developing non-software products for sale or license to a
#   third party, or (4) use of the Software to provide any service to an
#   external organisation for which payment is received. If you are
#   interested in using the Software commercially, please contact Oxford
#   University Innovation ("OUI"), the technology transfer company of the
#   University, to negotiate a licence. Contact details are:
#   Innovation@innovation.ox.ac.uk quoting reference DE/9564.
import argparse
import glob
import os
import string
import subprocess


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-i',dest='inputName',help='input ciftiFile',required=True)
    parser.add_argument('-o',dest='baseName',help='output basename',required=True)
    parser.add_argument('-l',dest='leftSurface',help='geometry for left cortex',required=True)
    parser.add_argument('-r',dest='rightSurface',help='geometry for right cortex',required=True)
    parser.add_argument('--st',dest='susanThreshold',help='susan brightness threshold for volumetric analysis ( default: 0 )',default=0)
    parser.add_argument('--sm',dest='susanExtent',help='susan mask size for volumetric analysis ( default: 4 )',default=4)
    parser.add_argument('--ss',dest='surfaceSigma',help='smoothing sigma for surface analysis ( default: 0 )',default=0)
    parser.add_argument('--se',dest='surfaceExtent',help='smoothing extent for surface analysis ( default: 4 )',default=4)
    parser.add_argument('--filmOptions',dest='filmOptions',help='film options to be used with all modes, list must be wrapped by quotes',default="") 
    args=parser.parse_args()
    os.mkdir("stats")
    splitCommand="wb_command -cifti-separate {} COLUMN -volume-all outVolume.nii -metric CORTEX_LEFT outLeft.func.gii -metric CORTEX_RIGHT outRight.func.gii".format(args.inputName)
    leftFilmCommand="{}/bin/film_gls --mode=surface --in=outLeft.func.gii --rn=statsLeft --epith={} --ms={} {}".format(os.environ["FSLDIR"],args.surfaceSigma,args.surfaceExtent,args.filmOptions)
    rightFilmCommand="{}/bin/film_gls --mode=surface --in=outRight.func.gii --rn=statsRight --epith={} --ms={} {}".format(os.environ["FSLDIR"],args.surfaceSigma,args.surfaceExtent,args.filmOptions)
    volumeFilmCommand="{}/bin/film_gls --in=outVolume --rn=statsVolume --epith={} --ms={} {}".format(os.environ["FSLDIR"],args.susanThreshold,args.susanExtent,args.filmOptions)
    unsplitCommandBase="wb_command -cifti-create-dense-from-template {} reforged.nii -left-metric outLeft.func.gii -metric CORTEX_RIGHT outRight.func.gii -volume-all outNifti".format(args.inputName)
    
    for command in [splitCommand,leftFilmCommand,rightFilmCommand,volumeFilmCommand]:
        print(command)
        myprocess=subprocess.Popen(command.split(),stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        processOutput=myprocess.communicate()[0]
        print(processOutput)
    
    for leftFile in glob.glob("statsLeft/*.func.gii"):
        rightFile = leftFile.replace("statsLeft","statsRight",1)
        volFile = leftFile.replace("statsLeft","statsVolume",1).replace("func.gii","nii.gz")
        outFile = leftFile.replace("statsLeft","stats",1).replace("func.gii","dscalar.nii")
        unsplitCommandBase="wb_command -cifti-create-dense-from-template {} {} -metric CORTEX_LEFT {} -metric CORTEX_RIGHT {} -volume-all {}".format(args.inputName,outFile,leftFile,rightFile,volFile)
        print(unsplitCommandBase)
        myprocess=subprocess.Popen(unsplitCommandBase.split(),stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        processOutput=myprocess.communicate()[0]
        print(processOutput)
