#################################################################
#
## Makefile for building libgd.nlm (NetWare version - gnu make)
## Use: make -f Makefile
##
## Comments to: Guenter Knauf <eflash@gmx.net>
##
## $Id: Makefile.netware,v 1.1.1.1 2014/02/06 18:14:22 duncan Exp $
#
#################################################################

# Edit the path below to point to the base of your Novell NDK.
ifndef NDKBASE
NDKBASE	= c:/novell
endif

# Base for the lib sources
ifndef LIBBASE
LIBBASE	= ../..
endif
# All library code is statically linked to avoid problems with other lib NLMs. 

# Edit the path below to point to your libpng sources or set environment var.
ifndef LIBPNG
LIBPNG	= $(LIBBASE)/libpng-1.2.16
endif
# Edit the path below to point to your libpng sources or set environment var.
ifndef LIBJPEG
LIBJPEG	= $(LIBBASE)/jpeg-6b
endif
# Edit the path below to point to your freetype sources or set environment var.
ifndef LIBFT2
LIBFT2	= $(LIBBASE)/freetype-2.3.4
endif
# Edit the path below to point to your zlib sources or set environment var.
ifndef ZLIBSDK
ZLIBSDK	= $(LIBBASE)/zlib-1.2.3
endif

LIBGD = ..

ifndef INSTDIR
INSTDIR	= libgd-$(LIBGD_VERSION_STR)-bin-nw
endif

# Edit the vars below to change NLM target settings.
TARGET  = libgd
COPYR	= Copyright (C) 1996-2007 Boutell.Com, Inc.
WWW	= http://www.libgd.org/
DESCR	= libgd $(LIBGD_VERSION_STR) - $(WWW)
MTSAFE	= YES
STACK	= 64000
SCREEN	= none
EXPORTS	= @$(TARGET).imp
EPREFIX	= LIBGD

# Edit the var below to point to your lib architecture.
ifndef LIBARCH
LIBARCH = LIBC
endif

# must be equal to DEBUG or NDEBUG
DB	= NDEBUG
# DB	= DEBUG
# Optimization: -O<n> or debugging: -g
ifeq ($(DB),NDEBUG)
	OPT	= -O2
	OBJDIR	= release
else
	OPT	= -g
	OBJDIR	= debug
endif

# Include the version info retrieved from xml2ver.h
-include $(OBJDIR)/version.inc

# The following line defines your compiler.
ifdef METROWERKS
	CC = mwccnlm
else
	CC = gcc
endif
# http://www.gknw.net/development/prgtools/awk.zip
AWK	= awk
YACC	= bison -y
CP	= cp -afv
# RM	= rm -f
# if you want to mark the target as MTSAFE you will need a tool for
# generating the xdc data for the linker; here's a minimal tool:
# http://www.gknw.net/development/prgtools/mkxdc.zip
MPKXDC	= mkxdc
PATCH	= patch
PERLRUN	= perl

# Global flags for all compilers
CFLAGS	= $(OPT) -D$(DB) -DNETWARE -DHAVE_CONFIG_H -nostdinc
#CFLAGS	+= -DHAVE_LIBPNG=1 -DHAVE_LIBJPEG=1
#CFLAGS	+= -DHAVE_LIBFREETYPE=1 -DHAVE_FT2BUILD_H=1
#CFLAGS	+= -DHAVE_LIBZ=1

ifeq ($(CC),mwccnlm)
LD	= mwldnlm
LDFLAGS	= -nostdlib $(PRELUDE) $(OBJL) $(LDLIBS) -o $@ -commandfile
AR	= mwldnlm
ARFLAGS	= -type library -w nocmdline $(OBJS) -o
LIBEXT	= lib
CFLAGS	+= -msgstyle gcc -gccinc -inline off -opt nointrinsics -proc 586
CFLAGS	+= -relax_pointers
#CFLAGS	+= -w on
ifeq ($(LIBARCH),LIBC)
	PRELUDE = $(SDK_LIBC)/imports/libcpre.o
	CFLAGS += -align 4
else
	PRELUDE = "$(METROWERKS)/Novell Support/libraries/runtime/prelude.obj"
#	CFLAGS += -include "$(METROWERKS)/Novell Support/headers/nlm_prefix.h"
	CFLAGS += -align 1
endif
else
LD	= nlmconv
LDFLAGS	= -T
AR	= ar
ARFLAGS	= -cq
LIBEXT	= a
CFLAGS	+= -fno-builtin -fpcc-struct-return -fno-strict-aliasing
CFLAGS	+= -Wall -Wno-unused -Wno-main # -pedantic
ifeq ($(LIBARCH),LIBC)
	PRELUDE = $(SDK_LIBC)/imports/libcpre.gcc.o
else
	PRELUDE = $(SDK_CLIB)/imports/clibpre.gcc.o
	CFLAGS += -include $(NDKBASE)/nlmconv/genlm.h
endif
endif

NDK_ROOT = $(NDKBASE)/ndk
SDK_CLIB = $(NDK_ROOT)/nwsdk
SDK_LIBC = $(NDK_ROOT)/libc

INCLUDES = -I. -I$(LIBGD) -I$(LIBPNG) -I$(LIBJPEG) -I$(LIBFT2)/include -I$(ZLIBSDK) 

ifeq ($(LIBARCH),LIBC)
	INCLUDES += -I$(SDK_LIBC)/include
	# INCLUDES += -I$(SDK_LIBC)/include/nks
	CFLAGS += -D_POSIX_SOURCE
	# CFLAGS += -D__ANSIC__
else
	INCLUDES += -I$(SDK_CLIB)/include/nlm
	# INCLUDES += -I$(SDK_CLIB)/include
	# INCLUDES += -I$(SDK_CLIB)/include/nlm/obsolete
endif
CFLAGS	+= $(INCLUDES)

ifeq ($(MTSAFE),YES)
	XDCOPT = -n
endif
ifeq ($(MTSAFE),NO)
	XDCOPT = -u
endif
ifdef XDCOPT
	XDCDATA = $(OBJDIR)/$(TARGET).xdc
endif

ifeq ($(findstring linux,$(OSTYPE)),linux)
DL	= '
#-include $(NDKBASE)/nlmconv/ncpfs.inc
endif

GDLIBOBJS	= \
	$(OBJDIR)/gd.o \
	$(OBJDIR)/gd_gd.o \
	$(OBJDIR)/gd_gd2.o \
	$(OBJDIR)/gd_gif_in.o \
	$(OBJDIR)/gd_gif_out.o \
	$(OBJDIR)/gd_io.o \
	$(OBJDIR)/gd_io_dp.o \
	$(OBJDIR)/gd_io_file.o \
	$(OBJDIR)/gd_io_ss.o \
	$(OBJDIR)/gd_jpeg.o \
	$(OBJDIR)/gd_png.o \
	$(OBJDIR)/gd_ss.o \
	$(OBJDIR)/gd_topal.o \
	$(OBJDIR)/gd_wbmp.o \
	$(OBJDIR)/gdcache.o \
	$(OBJDIR)/gdfontg.o \
	$(OBJDIR)/gdfontl.o \
	$(OBJDIR)/gdfontmb.o \
	$(OBJDIR)/gdfonts.o \
	$(OBJDIR)/gdfontt.o \
	$(OBJDIR)/gdft.o \
	$(OBJDIR)/gdfx.o \
	$(OBJDIR)/gdhelpers.o \
	$(OBJDIR)/gdkanji.o \
	$(OBJDIR)/gdtables.o \
	$(OBJDIR)/gdxpm.o \
	$(OBJDIR)/wbmp.o \
	$(EOLIST)
ifeq "$(wildcard $(LIBGD)/gd_security.c)" "$(LIBGD)/gd_security.c"
GDLIBOBJS	+= \
	$(OBJDIR)/gd_security.o \
	$(EOLIST)
endif

PNGLIBOBJS	= \
	$(OBJDIR)/png.o \
	$(OBJDIR)/pngerror.o \
	$(OBJDIR)/pngget.o \
	$(OBJDIR)/pngmem.o \
	$(OBJDIR)/pngpread.o \
	$(OBJDIR)/pngread.o \
	$(OBJDIR)/pngrio.o \
	$(OBJDIR)/pngrtran.o \
	$(OBJDIR)/pngrutil.o \
	$(OBJDIR)/pngset.o \
	$(OBJDIR)/pngtrans.o \
	$(OBJDIR)/pngwio.o \
	$(OBJDIR)/pngwrite.o \
	$(OBJDIR)/pngwtran.o \
	$(OBJDIR)/pngwutil.o \
	$(EOLIST)
ifeq "$(wildcard $(LIBPNG)/pnggccrd.c)" "$(LIBPNG)/pnggccrd.c"
PNGLIBOBJS	+= \
	$(OBJDIR)/pnggccrd.o \
	$(OBJDIR)/pngvcrd.o \
	$(EOLIST)
endif

OBJ_JPG	= $(OBJDIR)
JPGLIBOBJS = \
	$(OBJ_JPG)/jcapimin.o \
	$(OBJ_JPG)/jcapistd.o \
	$(OBJ_JPG)/jccoefct.o \
	$(OBJ_JPG)/jccolor.o \
	$(OBJ_JPG)/jcdctmgr.o \
	$(OBJ_JPG)/jchuff.o \
	$(OBJ_JPG)/jcinit.o \
	$(OBJ_JPG)/jcmainct.o \
	$(OBJ_JPG)/jcmarker.o \
	$(OBJ_JPG)/jcmaster.o \
	$(OBJ_JPG)/jcomapi.o \
	$(OBJ_JPG)/jcparam.o \
	$(OBJ_JPG)/jcphuff.o \
	$(OBJ_JPG)/jcprepct.o \
	$(OBJ_JPG)/jcsample.o \
	$(OBJ_JPG)/jctrans.o \
	$(OBJ_JPG)/jdapimin.o \
	$(OBJ_JPG)/jdapistd.o \
	$(OBJ_JPG)/jdatadst.o \
	$(OBJ_JPG)/jdatasrc.o \
	$(OBJ_JPG)/jdcoefct.o \
	$(OBJ_JPG)/jdcolor.o \
	$(OBJ_JPG)/jddctmgr.o \
	$(OBJ_JPG)/jdhuff.o \
	$(OBJ_JPG)/jdinput.o \
	$(OBJ_JPG)/jdmainct.o \
	$(OBJ_JPG)/jdmarker.o \
	$(OBJ_JPG)/jdmaster.o \
	$(OBJ_JPG)/jdmerge.o \
	$(OBJ_JPG)/jdphuff.o \
	$(OBJ_JPG)/jdpostct.o \
	$(OBJ_JPG)/jdsample.o \
	$(OBJ_JPG)/jdtrans.o \
	$(OBJ_JPG)/jerror.o \
	$(OBJ_JPG)/jfdctflt.o \
	$(OBJ_JPG)/jfdctfst.o \
	$(OBJ_JPG)/jfdctint.o \
	$(OBJ_JPG)/jidctflt.o \
	$(OBJ_JPG)/jidctfst.o \
	$(OBJ_JPG)/jidctint.o \
	$(OBJ_JPG)/jidctred.o \
	$(OBJ_JPG)/jquant1.o \
	$(OBJ_JPG)/jquant2.o \
	$(OBJ_JPG)/jutils.o \
	$(OBJ_JPG)/jmemmgr.o \
	$(OBJ_JPG)/jmemansi.o \
	$(EOLIST)

LIBFT2OBJS = \
	$(OBJ_FT2)/autohint.o \
	$(OBJ_FT2)/bdf.o \
	$(OBJ_FT2)/cff.o \
	$(OBJ_FT2)/ftbase.o \
	$(OBJ_FT2)/ftcache.o \
	$(OBJ_FT2)/ftglyph.o \
	$(OBJ_FT2)/ftinit.o \
	$(OBJ_FT2)/ftmm.o \
	$(OBJ_FT2)/ftsystem.o \
	$(OBJ_FT2)/pcf.o \
	$(OBJ_FT2)/pfr.o \
	$(OBJ_FT2)/psaux.o \
	$(OBJ_FT2)/pshinter.o \
	$(OBJ_FT2)/psmodule.o \
	$(OBJ_FT2)/raster.o \
	$(OBJ_FT2)/sfnt.o \
	$(OBJ_FT2)/smooth.o \
	$(OBJ_FT2)/truetype.o \
	$(OBJ_FT2)/type1.o \
	$(OBJ_FT2)/type1cid.o \
	$(OBJ_FT2)/type42.o \
	$(OBJ_FT2)/winfnt.o \
	$(OBJ_FT2)/infutil.o \
	$(OBJ_FT2)/ftgzip.o \
	$(OBJ_FT2)/ftlzw.o \
	$(OBJ_FT2)/ftpfr.o \
	$(OBJ_FT2)/ftstroke.o \
	$(OBJ_FT2)/ftsynth.o \
	$(OBJ_FT2)/fttype1.o \
	$(OBJ_FT2)/ftwinfnt.o \
	$(OBJ_FT2)/ftxf86.o \
	$(OBJ_FT2)/ftbbox.o \
	$(EOLIST)

ZLIBOBJS	= \
	$(OBJDIR)/adler32.o \
	$(OBJDIR)/compress.o \
	$(OBJDIR)/crc32.o \
	$(OBJDIR)/deflate.o \
	$(OBJDIR)/inflate.o \
	$(OBJDIR)/inffast.o \
	$(OBJDIR)/inftrees.o \
	$(OBJDIR)/trees.o \
	$(OBJDIR)/uncompr.o \
	$(OBJDIR)/zutil.o \
	$(EOLIST)
ifeq "$(wildcard $(ZLIBSDK)/infblock.c)" "$(ZLIBSDK)/infblock.c"
ZLIBOBJS	+= \
	$(OBJDIR)/infblock.o \
	$(OBJDIR)/infcodes.o \
	$(OBJDIR)/infutil.o \
	$(EOLIST)
endif

LDLIBS	+= $(LIBFT2)/builds/netware/LIBC/libft2.$(LIBEXT)

OBJS	:= $(GDLIBOBJS) $(PNGLIBOBJS) $(JPGLIBOBJS) $(ZLIBOBJS)

OBJL	= $(OBJS) $(OBJDIR)/nwlibc.o

vpath %.c . $(LIBGD) $(LIBPNG) $(LIBJPEG) $(ZLIBSDK)

.PHONY: all prebuild dist install clean clean-all test-cmds help

all: lib nlm

nlm: prebuild $(TARGET).nlm

lib: prebuild $(TARGET).$(LIBEXT)

prebuild: $(OBJDIR) $(OBJDIR)/version.inc config.h

$(OBJDIR)/%.o: %.c
#	@echo Compiling $<
	$(CC) $(CFLAGS) -c $< -o $@

$(OBJDIR)/version.inc: ../configure.ac $(OBJDIR)
	@echo Creating $@
	@$(AWK) -f get_ver.awk $< > $@

dist: all
	-$(RM) -r $(OBJDIR)*

install: $(INSTDIR) all
	@$(CP) $(TARGET).nlm $(INSTDIR)
	@$(CP) $(TARGET).$(LIBEXT) $(INSTDIR)
	@$(CP) ../CHANGES $(INSTDIR)
	@$(CP) ../COPYING $(INSTDIR)
	@$(CP) ../README $(INSTDIR)
	@$(CP) ../RELEASE-NOTES $(INSTDIR)

clean:
	-$(RM) config.h
	-$(RM) -r $(OBJDIR)*
	-$(RM) $(TARGET).nlm $(TARGET).$(LIBEXT) $(TARGET).imp

dist-clean:
	-$(RM) config.h
	-$(RM) -r $(OBJDIR)*

clean-all: clean
	-$(MAKE) -C tests -f Makefile clean

test-cmds:
	-$(MAKE) -C tests -f Makefile

$(INSTDIR):
	@mkdir $(INSTDIR)

$(OBJDIR):
	@mkdir $(OBJDIR)

$(TARGET).$(LIBEXT): $(OBJS)
	@echo Creating $@
	@-$(RM) $@
	@$(AR) $(ARFLAGS) $@ $^

$(TARGET).nlm: $(OBJDIR)/$(TARGET).def $(TARGET).imp $(OBJL) $(XDCDATA)
	@echo Linking $@
	@-$(RM) $@
	@$(LD) $(LDFLAGS) $<

$(OBJDIR)/%.xdc: Makefile
	@echo Creating $@
	@$(MPKXDC) $(XDCOPT) $@

$(OBJDIR)/%.def: Makefile
	@echo $(DL)# DEF file for linking with $(LD)$(DL) > $@
	@echo $(DL)# Do not edit this file - it is created by make!$(DL) >> $@
	@echo $(DL)# All your changes will be lost!!$(DL) >> $@
	@echo $(DL)#$(DL) >> $@
	@echo $(DL)copyright "$(COPYR)"$(DL) >> $@
	@echo $(DL)description "$(DESCR)"$(DL) >> $@
	@echo $(DL)version $(LIBGD_VERSION)$(DL) >> $@
ifdef NLMTYPE
	@echo $(DL)type $(NLMTYPE)$(DL) >> $@
endif
ifdef STACK
	@echo $(DL)stack $(STACK)$(DL) >> $@
endif
ifdef SCREEN
	@echo $(DL)screenname "$(SCREEN)"$(DL) >> $@
else
	@echo $(DL)screenname "DEFAULT"$(DL) >> $@
endif
ifeq ($(DB),DEBUG)
	@echo $(DL)debug$(DL) >> $@
endif
	@echo $(DL)threadname "$(TARGET)"$(DL) >> $@
ifdef XDCDATA
	@echo $(DL)xdcdata $(XDCDATA)$(DL) >> $@
endif
	@echo $(DL)flag_on 64$(DL) >> $@
ifeq ($(LIBARCH),CLIB)
	@echo $(DL)start _Prelude$(DL) >> $@
	@echo $(DL)exit _Stop$(DL) >> $@
	@echo $(DL)import @$(SDK_CLIB)/imports/clib.imp$(DL) >> $@
	@echo $(DL)import @$(SDK_CLIB)/imports/threads.imp$(DL) >> $@
	@echo $(DL)import @$(SDK_CLIB)/imports/nlmlib.imp$(DL) >> $@
	@echo $(DL)import @$(SDK_CLIB)/imports/socklib.imp$(DL) >> $@
	@echo $(DL)module clib$(DL) >> $@
else
	@echo $(DL)pseudopreemption$(DL) >> $@
	@echo $(DL)start _LibCPrelude$(DL) >> $@
	@echo $(DL)exit _LibCPostlude$(DL) >> $@
	@echo $(DL)check _LibCCheckUnload$(DL) >> $@
	@echo $(DL)import @$(SDK_LIBC)/imports/libc.imp$(DL) >> $@
	@echo $(DL)import @$(SDK_LIBC)/imports/netware.imp$(DL) >> $@
	@echo $(DL)module libc$(DL) >> $@
endif
ifdef MODULES
	@echo $(DL)module $(MODULES)$(DL) >> $@
endif
ifdef IMPORTS
	@echo $(DL)import $(IMPORTS)$(DL) >> $@
endif
ifdef EXPORTS
	@echo $(DL)export $(EXPORTS)$(DL) >> $@
endif
ifeq ($(LD),nlmconv)
	@echo $(DL)input $(OBJL)$(DL) >> $@
	@echo $(DL)input $(PRELUDE)$(DL) >> $@
ifdef LDLIBS
	@echo $(DL)input $(LDLIBS)$(DL) >> $@
endif
	@echo $(DL)output $(TARGET).nlm$(DL) >> $@
endif

config.h: Makefile
	@echo Creating $@
	@echo $(DL)/* $@ for NetWare target.$(DL) > $@
	@echo $(DL)** Do not edit this file - it is created by make!$(DL) >> $@
	@echo $(DL)** All your changes will be lost!!$(DL) >> $@
	@echo $(DL)*/$(DL) >> $@
	@echo $(DL)#define OS "i586-pc-NetWare"$(DL) >> $@
	@echo $(DL)#define VERSION "$(LIBGD_VERSION_STR)"$(DL) >> $@
	@echo $(DL)#define PACKAGE_BUGREPORT "http://bugs.libgd.org/"$(DL) >> $@
	@echo $(DL)#define HAVE_ARPA_INET_H 1$(DL) >> $@
	@echo $(DL)#define HAVE_ASSERT_H 1$(DL) >> $@
	@echo $(DL)#define HAVE_DLFCN_H 1$(DL) >> $@
	@echo $(DL)#define HAVE_DLOPEN 1$(DL) >> $@
	@echo $(DL)#define HAVE_ERR_H 1$(DL) >> $@
	@echo $(DL)#define HAVE_ERRNO_H 1$(DL) >> $@
	@echo $(DL)#define HAVE_FCNTL_H 1$(DL) >> $@
	@echo $(DL)#define HAVE_FIONBIO 1$(DL) >> $@
	@echo $(DL)#define HAVE_GETHOSTBYADDR 1$(DL) >> $@
	@echo $(DL)#define HAVE_GETTIMEOFDAY 1$(DL) >> $@
	@echo $(DL)#define HAVE_INET_ADDR 1$(DL) >> $@
	@echo $(DL)#define HAVE_INET_NTOA 1$(DL) >> $@
	@echo $(DL)#define HAVE_INET_PTON 1$(DL) >> $@
	@echo $(DL)#define HAVE_INTTYPES_H 1$(DL) >> $@
	@echo $(DL)#define HAVE_LIMITS_H 1$(DL) >> $@
	@echo $(DL)#define HAVE_LONGLONG 1$(DL) >> $@
	@echo $(DL)#define HAVE_MALLOC_H 1$(DL) >> $@
	@echo $(DL)#define HAVE_NETINET_IN_H 1$(DL) >> $@
	@echo $(DL)#define HAVE_SELECT 1$(DL) >> $@
	@echo $(DL)#define HAVE_SETJMP_H 1$(DL) >> $@
	@echo $(DL)#define HAVE_SIGNAL 1$(DL) >> $@
	@echo $(DL)#define HAVE_SOCKET 1$(DL) >> $@
	@echo $(DL)#define HAVE_STDARG_H 1$(DL) >> $@
	@echo $(DL)#define HAVE_STDDEF_H 1$(DL) >> $@
	@echo $(DL)#define HAVE_STDINT_H 1$(DL) >> $@
	@echo $(DL)#define HAVE_STDLIB_H 1$(DL) >> $@
	@echo $(DL)#define HAVE_STRCASECMP 1$(DL) >> $@
	@echo $(DL)#define HAVE_STRDUP 1$(DL) >> $@
	@echo $(DL)#define HAVE_STRFTIME 1$(DL) >> $@
	@echo $(DL)#define HAVE_STRING_H 1$(DL) >> $@
	@echo $(DL)#define HAVE_STRLCAT 1$(DL) >> $@
	@echo $(DL)#define HAVE_STRLCPY 1$(DL) >> $@
	@echo $(DL)#define HAVE_STRSTR 1$(DL) >> $@
	@echo $(DL)#define HAVE_SYS_PARAM_H 1$(DL) >> $@
	@echo $(DL)#define HAVE_SYS_SELECT_H 1$(DL) >> $@
	@echo $(DL)#define HAVE_SYS_STAT_H 1$(DL) >> $@
	@echo $(DL)#define HAVE_SYS_TIME_H 1$(DL) >> $@
	@echo $(DL)#define HAVE_TERMIOS_H 1$(DL) >> $@
	@echo $(DL)#define HAVE_TIME_H 1$(DL) >> $@
	@echo $(DL)#define HAVE_UNAME 1$(DL) >> $@
	@echo $(DL)#define HAVE_UNISTD_H 1$(DL) >> $@
	@echo $(DL)#define STDC_HEADERS 1$(DL) >> $@
	@echo $(DL)#define TIME_WITH_SYS_TIME 1$(DL) >> $@
	@echo $(DL)#define HAVE_SYS_TYPES_H 1$(DL) >> $@
	@echo $(DL)#define HAVE_ZLIB_H 1$(DL) >> $@
	@echo $(DL)#define HAVE_LIBZ 1$(DL) >> $@
	@echo $(DL)#define HAVE_LIBPNG 1$(DL) >> $@
	@echo $(DL)#define HAVE_LIBJPEG 1$(DL) >> $@
	@echo $(DL)#define HAVE_LIBFREETYPE 1$(DL) >> $@
	@echo $(DL)#define HAVE_FT2BUILD_H 1$(DL) >> $@
#	@echo $(DL)#define DEFAULT_FONTPATH "sys:/java/nwgfx/lib/x11/fonts/ttf"$(DL) >> $@
#	@echo $(DL)#define PATHSEPARATOR ";"$(DL) >> $@

$(TARGET).imp: get_exp.awk $(LIBGD)/gd.h
	@echo Creating $@
	@$(AWK) -v EPREFIX=$(EPREFIX) -f $^ > $@

patch: Makefile
	@echo Patching sources...
	$(PATCH) -d $(LIBGD) -b -p 0 -i $(LIBGD)/netware/$(notdir $(wildcard $(LIBGD)/netware/*.diff))

help:
	@echo $(DL)===========================================================$(DL)
	@echo Novell NDK Base = $(NDKBASE)
	@echo libpng Source   = $(LIBPNG)
	@echo libjpeg Source  = $(LIBJPEG)
	@echo Freetype 2 SDK  = $(LIBFT2)
	@echo Zlib SDK        = $(ZLIBSDK)
	@echo $(DL)===========================================================$(DL)
	@echo $(DL)libgd $(LIBGD_VERSION_STR) - available targets are:$(DL)
	@echo $(DL)$(MAKE) all$(DL)
	@echo $(DL)$(MAKE) nlm$(DL)
	@echo $(DL)$(MAKE) lib$(DL)
	@echo $(DL)$(MAKE) clean$(DL)
	@echo $(DL)$(MAKE) clean-all$(DL)
	@echo $(DL)$(MAKE) test-cmds$(DL)
	@echo $(DL)$(MAKE) patch$(DL)
	@echo $(DL)===========================================================$(DL)


